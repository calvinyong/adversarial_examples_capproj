# Model copied from https://github.com/abhijeet3922/Object-recognition-CIFAR-10
# https://github.com/keras-team/keras/blob/master/examples/cifar10_cnn.py

import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import BatchNormalization, Conv2D, MaxPooling2D
from keras.optimizers import RMSprop
from keras.regularizers import l2
from keras.callbacks import ModelCheckpoint, CSVLogger
from keras.utils import to_categorical
import os

os.environ["CUDA_VISIBLE_DEVICES"]="1"

batch_size = 64
num_classes = 3
epochs = 200
data_augmentation = True

def load_oid3class_data(normalize=True, onehot=True):
    """
    Bird: 0
    Cat: 1
    Fish: 2
    """
    x_test = np.load('oid_3class_test.npy')
    if normalize:
        x_test = x_test / 255.0
    x_test = x_test.astype('float32')
    
    y_test = np.zeros(750)
    y_test[250:500] = 1
    y_test[500:] = 2
    if onehot:
        y_test = to_categorical(y_test)
        
    return x_test, y_test

train_dir = '../Dataset/train/'

train_idg = ImageDataGenerator(
      rescale=1./255,
      rotation_range=30,
      width_shift_range=0.1,
      height_shift_range=0.1,
      shear_range=0.1,
      zoom_range=0.1,
      horizontal_flip=True)

train_gen = train_idg.flow_from_directory(train_dir,
                                          batch_size=25,
                                          target_size=(299, 299))

x_test, y_test = load_oid3class_data()


weight_decay = 1e-4

model = Sequential()
model.add(Conv2D(32, (3,3), padding='same', kernel_regularizer=l2(weight_decay),
          input_shape=(299, 299, 3)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(32, (3,3), padding='same', kernel_regularizer=l2(weight_decay)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(64, (3,3), padding='same', kernel_regularizer=l2(weight_decay)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3,3), padding='same', kernel_regularizer=l2(weight_decay)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.3))

model.add(Conv2D(128, (3,3), padding='same', kernel_regularizer=l2(weight_decay)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(128, (3,3), padding='same', kernel_regularizer=l2(weight_decay)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.4))

model.add(Flatten())
model.add(Dense(num_classes))
model.add(Activation('softmax'))


# initiate RMSprop optimizer
opt = RMSprop(lr=0.001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

print(model.summary())

model_type = 'vgg_like'
save_dir = os.path.join(os.getcwd(), 'vgglike_saved_models')
model_name = 'oid_3class_%s_{epoch:03d}.h5' % model_type
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
filepath = os.path.join(save_dir, model_name)


checkpoint = ModelCheckpoint(filepath=filepath,
                             monitor='val_acc',
                             verbose=1,
                             save_best_only=True)
csvlog = CSVLogger('oid_3class_vgglike_log.csv')


callbacks = [checkpoint, csvlog]

# Fit the model on the batches generated by datagen.flow().
model.fit_generator(train_gen, epochs=epochs, callbacks=callbacks,
                    validation_data=(x_test, y_test), workers=8,
                    steps_per_epoch=60)

# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])
